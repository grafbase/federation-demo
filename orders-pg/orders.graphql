extend schema
    @link(
        url: "https://grafbase.com/extensions/postgres/0.4.1"
        import: [
            "@pgDatabase"
            "@pgTable"
            "@pgColumn"
            "@pgEnum"
            "@pgEnumVariant"
            "@pgRelation"
            "@pgKey"
            "@pgLookup"
            "@pgSelectOne"
            "@pgSelectMany"
            "@pgInsertOne"
            "@pgInsertMany"
            "@pgUpdateOne"
            "@pgUpdateMany"
            "@pgDeleteOne"
            "@pgDeleteMany"
            "@pgConnection"
            "@pgMutation"
            "@pgReturning"
            "PgKeyType"
            "PgColumnType"
            "PgRelationType"
        ]
    )
    @link(
        url: "https://specs.grafbase.com/composite-schemas/v1"
        import: ["@lookup", "@key", "@derive", "@is"]
    )
    @link(
        url: "https://specs.apollo.dev/federation/v2.3"
        import: ["@shareable", "@inaccessible"]
    )
    @pgDatabase(name: "default")

"""
Decimal data type with arbitrary precision, represented as a string containing a numeric value
"""
scalar Decimal

"""
Timestamp data type represented as a string in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.sss)
"""
scalar Timestamp

"""
Specifies the direction for ordering results.
"""
enum OrderDirection {
    """
    Specifies an ascending order for a given orderBy argument.
    """
    ASC
    """
    Specifies a descending order for a given orderBy argument.
    """
    DESC
}

"""
Search filter input for Boolean type.
"""
input BooleanFilterInput @oneOf {
    """
    The value is exactly the one given
    """
    eq: Boolean
    """
    The value is not the one given
    """
    ne: Boolean
    """
    The value is greater than the one given
    """
    gt: Boolean
    """
    The value is less than the one given
    """
    lt: Boolean
    """
    The value is greater than, or equal to the one given
    """
    gte: Boolean
    """
    The value is less than, or equal to the one given
    """
    lte: Boolean
    """
    The value is in the given array of values
    """
    in: [Boolean!]
    """
    The value is not in the given array of values
    """
    nin: [Boolean!]
    """
    A negation of the given filter
    """
    not: BooleanFilterInput
}

"""
Update input for Boolean type.
"""
input BooleanUpdateInput @oneOf {
    """
    Replaces the value of a field with the specified value.
    """
    set: Boolean
}

"""
Input for creating a new Customer
"""
input CustomerCreateInput {
    """
    Set field value for customerId
    """
    customerId: Int
    """
    Set field value for name
    """
    name: String!
    """
    Set field value for email
    """
    email: String!
    """
    Set field value for phone
    """
    phone: String
    """
    Set field value for address
    """
    address: String
    """
    Set field value for city
    """
    city: String
    """
    Set field value for postalCode
    """
    postalCode: String
    """
    Set field value for country
    """
    country: String
    """
    Set field value for createdAt
    """
    createdAt: Timestamp
}

"""
Filter input type for Customer objects.
"""
input CustomerFilterInput @oneOf {
    """
    Filter by the given customerId
    """
    customerId: IntFilterInput
    """
    Filter by the given name
    """
    name: StringFilterInput
    """
    Filter by the given email
    """
    email: StringFilterInput
    """
    Filter by the given phone
    """
    phone: StringFilterInput
    """
    Filter by the given address
    """
    address: StringFilterInput
    """
    Filter by the given city
    """
    city: StringFilterInput
    """
    Filter by the given postalCode
    """
    postalCode: StringFilterInput
    """
    Filter by the given country
    """
    country: StringFilterInput
    """
    Filter by the given createdAt
    """
    createdAt: TimestampFilterInput
    """
    Filter by the related Order objects
    """
    orders: OrderCollectionFilterInput
    """
    Filter by the related PaymentMethod objects
    """
    paymentMethods: PaymentMethodCollectionFilterInput
    """
    All of the filters must match
    """
    ALL: [CustomerFilterInput]
    """
    None of the filters must match
    """
    NONE: [CustomerFilterInput]
    """
    At least one of the filters must match
    """
    ANY: [CustomerFilterInput]
}

"""
Input type to select a unique Customer
"""
input CustomerLookupInput @oneOf {
    """
    Select by the 'email' field
    """
    email: String
    """
    Select by the 'customerId' field
    """
    customerId: Int
}

"""
Lookup input type for Customer objects for subgraph joins.
"""
input CustomerManyLookupInput @oneOf @inaccessible {
    """
    Select by the 'email' field
    """
    email: [String!] @inaccessible
    """
    Select by the 'customerId' field
    """
    customerId: [Int!] @inaccessible
}

"""
Specifies the ordering for Customer results.
"""
input CustomerOrderByInput @oneOf {
    """
    Order customers by customerId
    """
    customerId: OrderDirection
    """
    Order customers by name
    """
    name: OrderDirection
    """
    Order customers by email
    """
    email: OrderDirection
    """
    Order customers by phone
    """
    phone: OrderDirection
    """
    Order customers by address
    """
    address: OrderDirection
    """
    Order customers by city
    """
    city: OrderDirection
    """
    Order customers by postalCode
    """
    postalCode: OrderDirection
    """
    Order customers by country
    """
    country: OrderDirection
    """
    Order customers by createdAt
    """
    createdAt: OrderDirection
}

"""
Input for updating an existing Customer
"""
input CustomerUpdateInput {
    """
    Update field value for customerId
    """
    customerId: IntUpdateInput
    """
    Update field value for name
    """
    name: StringUpdateInput
    """
    Update field value for email
    """
    email: StringUpdateInput
    """
    Update field value for phone
    """
    phone: StringUpdateInput
    """
    Update field value for address
    """
    address: StringUpdateInput
    """
    Update field value for city
    """
    city: StringUpdateInput
    """
    Update field value for postalCode
    """
    postalCode: StringUpdateInput
    """
    Update field value for country
    """
    country: StringUpdateInput
    """
    Update field value for createdAt
    """
    createdAt: TimestampUpdateInput
}

"""
Search filter input for Decimal type.
"""
input DecimalFilterInput @oneOf {
    """
    The value is exactly the one given
    """
    eq: Decimal
    """
    The value is not the one given
    """
    ne: Decimal
    """
    The value is greater than the one given
    """
    gt: Decimal
    """
    The value is less than the one given
    """
    lt: Decimal
    """
    The value is greater than, or equal to the one given
    """
    gte: Decimal
    """
    The value is less than, or equal to the one given
    """
    lte: Decimal
    """
    The value is in the given array of values
    """
    in: [Decimal!]
    """
    The value is not in the given array of values
    """
    nin: [Decimal!]
    """
    A negation of the given filter
    """
    not: DecimalFilterInput
}

"""
Update input for Decimal type.
"""
input DecimalUpdateInput @oneOf {
    """
    Replaces the value of a field with the specified value.
    """
    set: Decimal
    """
    Increments the value of a field by the specified value.
    """
    increment: Decimal
    """
    Decrements the value of a field by the specified value.
    """
    decrement: Decimal
    """
    Multiplies the value of a field by the specified value.
    """
    multiply: Decimal
    """
    Divides the value of a field by the specified value.
    """
    divide: Decimal
}

"""
Search filter input for Int type.
"""
input IntFilterInput @oneOf {
    """
    The value is exactly the one given
    """
    eq: Int
    """
    The value is not the one given
    """
    ne: Int
    """
    The value is greater than the one given
    """
    gt: Int
    """
    The value is less than the one given
    """
    lt: Int
    """
    The value is greater than, or equal to the one given
    """
    gte: Int
    """
    The value is less than, or equal to the one given
    """
    lte: Int
    """
    The value is in the given array of values
    """
    in: [Int!]
    """
    The value is not in the given array of values
    """
    nin: [Int!]
    """
    A negation of the given filter
    """
    not: IntFilterInput
}

"""
Update input for Int type.
"""
input IntUpdateInput @oneOf {
    """
    Replaces the value of a field with the specified value.
    """
    set: Int
    """
    Increments the value of a field by the specified value.
    """
    increment: Int
    """
    Decrements the value of a field by the specified value.
    """
    decrement: Int
    """
    Multiplies the value of a field by the specified value.
    """
    multiply: Int
    """
    Divides the value of a field by the specified value.
    """
    divide: Int
}

"""
Filter input type for Order collections
"""
input OrderCollectionFilterInput {
    """
    The object is related to an object with the given fields
    """
    contains: OrderFilterInput
}

"""
Input for creating a new Order
"""
input OrderCreateInput {
    """
    Set field value for orderId
    """
    orderId: Int
    """
    Set field value for customerId
    """
    customerId: Int!
    """
    Set field value for orderDate
    """
    orderDate: Timestamp
    """
    Set field value for status
    """
    status: String
    """
    Set field value for totalAmount
    """
    totalAmount: Decimal!
    """
    Set field value for shippingAddress
    """
    shippingAddress: String
    """
    Set field value for paymentMethodId
    """
    paymentMethodId: Int
}

"""
Filter input type for Order objects.
"""
input OrderFilterInput @oneOf {
    """
    Filter by the given orderId
    """
    orderId: IntFilterInput
    """
    Filter by the given customerId
    """
    customerId: IntFilterInput
    """
    Filter by the given orderDate
    """
    orderDate: TimestampFilterInput
    """
    Filter by the given status
    """
    status: StringFilterInput
    """
    Filter by the given totalAmount
    """
    totalAmount: DecimalFilterInput
    """
    Filter by the given shippingAddress
    """
    shippingAddress: StringFilterInput
    """
    Filter by the given paymentMethodId
    """
    paymentMethodId: IntFilterInput
    """
    Filter by the related Customer object
    """
    customer: CustomerFilterInput
    """
    Filter by the related PaymentMethod object
    """
    paymentMethod: PaymentMethodFilterInput
    """
    Filter by the related OrderItem objects
    """
    orderItems: OrderItemCollectionFilterInput
    """
    All of the filters must match
    """
    ALL: [OrderFilterInput]
    """
    None of the filters must match
    """
    NONE: [OrderFilterInput]
    """
    At least one of the filters must match
    """
    ANY: [OrderFilterInput]
}

"""
Filter input type for OrderItem collections
"""
input OrderItemCollectionFilterInput {
    """
    The object is related to an object with the given fields
    """
    contains: OrderItemFilterInput
}

"""
Input for creating a new OrderItem
"""
input OrderItemCreateInput {
    """
    Set field value for orderItemId
    """
    orderItemId: Int
    """
    Set field value for orderId
    """
    orderId: Int!
    """
    Set field value for productId
    """
    productId: String!
    """
    Set field value for quantity
    """
    quantity: Int!
    """
    Set field value for unitPrice
    """
    unitPrice: Decimal!
    """
    Set field value for productName
    """
    productName: String!
}

"""
Filter input type for OrderItem objects.
"""
input OrderItemFilterInput @oneOf {
    """
    Filter by the given orderItemId
    """
    orderItemId: IntFilterInput
    """
    Filter by the given orderId
    """
    orderId: IntFilterInput
    """
    Filter by the given productId
    """
    productId: StringFilterInput
    """
    Filter by the given quantity
    """
    quantity: IntFilterInput
    """
    Filter by the given unitPrice
    """
    unitPrice: DecimalFilterInput
    """
    Filter by the given productName
    """
    productName: StringFilterInput
    """
    Filter by the related Order object
    """
    order: OrderFilterInput
    """
    All of the filters must match
    """
    ALL: [OrderItemFilterInput]
    """
    None of the filters must match
    """
    NONE: [OrderItemFilterInput]
    """
    At least one of the filters must match
    """
    ANY: [OrderItemFilterInput]
}

"""
Input type to select a unique OrderItem
"""
input OrderItemLookupInput @oneOf {
    """
    Select by the 'orderItemId' field
    """
    orderItemId: Int
}

"""
Lookup input type for OrderItem objects for subgraph joins.
"""
input OrderItemManyLookupInput @oneOf @inaccessible {
    """
    Select by the 'orderItemId' field
    """
    orderItemId: [Int!] @inaccessible
}

"""
Specifies the ordering for OrderItem results.
"""
input OrderItemOrderByInput @oneOf {
    """
    Order orderItems by orderItemId
    """
    orderItemId: OrderDirection
    """
    Order orderItems by orderId
    """
    orderId: OrderDirection
    """
    Order orderItems by productId
    """
    productId: OrderDirection
    """
    Order orderItems by quantity
    """
    quantity: OrderDirection
    """
    Order orderItems by unitPrice
    """
    unitPrice: OrderDirection
    """
    Order orderItems by productName
    """
    productName: OrderDirection
    """
    Order OrderItem results by Order fields
    """
    order: OrderOrderByInput
}

"""
Input for updating an existing OrderItem
"""
input OrderItemUpdateInput {
    """
    Update field value for orderItemId
    """
    orderItemId: IntUpdateInput
    """
    Update field value for orderId
    """
    orderId: IntUpdateInput
    """
    Update field value for productId
    """
    productId: StringUpdateInput
    """
    Update field value for quantity
    """
    quantity: IntUpdateInput
    """
    Update field value for unitPrice
    """
    unitPrice: DecimalUpdateInput
    """
    Update field value for productName
    """
    productName: StringUpdateInput
}

"""
Input type to select a unique Order
"""
input OrderLookupInput @oneOf {
    """
    Select by the 'orderId' field
    """
    orderId: Int
}

"""
Lookup input type for Order objects for subgraph joins.
"""
input OrderManyLookupInput @oneOf @inaccessible {
    """
    Select by the 'orderId' field
    """
    orderId: [Int!] @inaccessible
}

"""
Specifies the ordering for Order results.
"""
input OrderOrderByInput @oneOf {
    """
    Order orders by orderId
    """
    orderId: OrderDirection
    """
    Order orders by customerId
    """
    customerId: OrderDirection
    """
    Order orders by orderDate
    """
    orderDate: OrderDirection
    """
    Order orders by status
    """
    status: OrderDirection
    """
    Order orders by totalAmount
    """
    totalAmount: OrderDirection
    """
    Order orders by shippingAddress
    """
    shippingAddress: OrderDirection
    """
    Order orders by paymentMethodId
    """
    paymentMethodId: OrderDirection
    """
    Order Order results by Customer fields
    """
    customer: CustomerOrderByInput
    """
    Order Order results by PaymentMethod fields
    """
    paymentMethod: PaymentMethodOrderByInput
}

"""
Input for updating an existing Order
"""
input OrderUpdateInput {
    """
    Update field value for orderId
    """
    orderId: IntUpdateInput
    """
    Update field value for customerId
    """
    customerId: IntUpdateInput
    """
    Update field value for orderDate
    """
    orderDate: TimestampUpdateInput
    """
    Update field value for status
    """
    status: StringUpdateInput
    """
    Update field value for totalAmount
    """
    totalAmount: DecimalUpdateInput
    """
    Update field value for shippingAddress
    """
    shippingAddress: StringUpdateInput
    """
    Update field value for paymentMethodId
    """
    paymentMethodId: IntUpdateInput
}

"""
Filter input type for PaymentMethod collections
"""
input PaymentMethodCollectionFilterInput {
    """
    The object is related to an object with the given fields
    """
    contains: PaymentMethodFilterInput
}

"""
Input for creating a new PaymentMethod
"""
input PaymentMethodCreateInput {
    """
    Set field value for paymentMethodId
    """
    paymentMethodId: Int
    """
    Set field value for customerId
    """
    customerId: Int!
    """
    Set field value for paymentType
    """
    paymentType: String!
    """
    Set field value for accountLabel
    """
    accountLabel: String
    """
    Set field value for isDefault
    """
    isDefault: Boolean
}

"""
Filter input type for PaymentMethod objects.
"""
input PaymentMethodFilterInput @oneOf {
    """
    Filter by the given paymentMethodId
    """
    paymentMethodId: IntFilterInput
    """
    Filter by the given customerId
    """
    customerId: IntFilterInput
    """
    Filter by the given paymentType
    """
    paymentType: StringFilterInput
    """
    Filter by the given accountLabel
    """
    accountLabel: StringFilterInput
    """
    Filter by the given isDefault
    """
    isDefault: BooleanFilterInput
    """
    Filter by the related Customer object
    """
    customer: CustomerFilterInput
    """
    Filter by the related Order objects
    """
    orders: OrderCollectionFilterInput
    """
    All of the filters must match
    """
    ALL: [PaymentMethodFilterInput]
    """
    None of the filters must match
    """
    NONE: [PaymentMethodFilterInput]
    """
    At least one of the filters must match
    """
    ANY: [PaymentMethodFilterInput]
}

"""
Input type to select a unique PaymentMethod
"""
input PaymentMethodLookupInput @oneOf {
    """
    Select by the 'paymentMethodId' field
    """
    paymentMethodId: Int
}

"""
Lookup input type for PaymentMethod objects for subgraph joins.
"""
input PaymentMethodManyLookupInput @oneOf @inaccessible {
    """
    Select by the 'paymentMethodId' field
    """
    paymentMethodId: [Int!] @inaccessible
}

"""
Specifies the ordering for PaymentMethod results.
"""
input PaymentMethodOrderByInput @oneOf {
    """
    Order paymentMethods by paymentMethodId
    """
    paymentMethodId: OrderDirection
    """
    Order paymentMethods by customerId
    """
    customerId: OrderDirection
    """
    Order paymentMethods by paymentType
    """
    paymentType: OrderDirection
    """
    Order paymentMethods by accountLabel
    """
    accountLabel: OrderDirection
    """
    Order paymentMethods by isDefault
    """
    isDefault: OrderDirection
    """
    Order PaymentMethod results by Customer fields
    """
    customer: CustomerOrderByInput
}

"""
Input for updating an existing PaymentMethod
"""
input PaymentMethodUpdateInput {
    """
    Update field value for paymentMethodId
    """
    paymentMethodId: IntUpdateInput
    """
    Update field value for customerId
    """
    customerId: IntUpdateInput
    """
    Update field value for paymentType
    """
    paymentType: StringUpdateInput
    """
    Update field value for accountLabel
    """
    accountLabel: StringUpdateInput
    """
    Update field value for isDefault
    """
    isDefault: BooleanUpdateInput
}

"""
Search filter input for String type.
"""
input StringFilterInput @oneOf {
    """
    The value is exactly the one given
    """
    eq: String
    """
    The value is not the one given
    """
    ne: String
    """
    The value is greater than the one given
    """
    gt: String
    """
    The value is less than the one given
    """
    lt: String
    """
    The value is greater than, or equal to the one given
    """
    gte: String
    """
    The value is less than, or equal to the one given
    """
    lte: String
    """
    The given input is part of the column value
    """
    like: String
    """
    The value is in the given array of values
    """
    in: [String!]
    """
    The value is not in the given array of values
    """
    nin: [String!]
    """
    A negation of the given filter
    """
    not: StringFilterInput
}

"""
Update input for String type.
"""
input StringUpdateInput @oneOf {
    """
    Replaces the value of a field with the specified value.
    """
    set: String
}

"""
Search filter input for Timestamp type.
"""
input TimestampFilterInput @oneOf {
    """
    The value is exactly the one given
    """
    eq: Timestamp
    """
    The value is not the one given
    """
    ne: Timestamp
    """
    The value is greater than the one given
    """
    gt: Timestamp
    """
    The value is less than the one given
    """
    lt: Timestamp
    """
    The value is greater than, or equal to the one given
    """
    gte: Timestamp
    """
    The value is less than, or equal to the one given
    """
    lte: Timestamp
    """
    The value is in the given array of values
    """
    in: [Timestamp!]
    """
    The value is not in the given array of values
    """
    nin: [Timestamp!]
    """
    A negation of the given filter
    """
    not: TimestampFilterInput
}

"""
Update input for Timestamp type.
"""
input TimestampUpdateInput @oneOf {
    """
    Replaces the value of a field with the specified value.
    """
    set: Timestamp
}

"""
Simplified customer data for order processing
"""
type Customer
    @key(fields: "email")
    @key(fields: "customerId")
    @pgTable(name: "customers")
    @pgKey(fields: ["email"], type: UNIQUE)
    @pgKey(fields: ["customerId"], type: PRIMARY) {
    """
    Unique identifier for the customer
    """
    customerId: Int! @pgColumn(name: "customer_id", type: INT)
    name: String! @pgColumn(name: "name", type: VARCHAR)
    """
    Primary contact email for order communications
    """
    email: String! @pgColumn(name: "email", type: VARCHAR)
    phone: String @pgColumn(name: "phone", type: VARCHAR)
    """
    Primary shipping address for deliveries
    """
    address: String @pgColumn(name: "address", type: VARCHAR)
    city: String @pgColumn(name: "city", type: VARCHAR)
    postalCode: String @pgColumn(name: "postal_code", type: VARCHAR)
    country: String @pgColumn(name: "country", type: VARCHAR)
    createdAt: Timestamp! @pgColumn(name: "created_at", type: TIMESTAMP)
    orders(
        """
        Filter the related Order instances
        """
        filter: OrderFilterInput
        """
        Select the first Order instances
        """
        first: Int
        """
        Select the last Order instances
        """
        last: Int
        """
        Select the Order instances before the given cursor
        """
        before: String
        """
        Select the Order instances after the given cursor
        """
        after: String
        """
        Order the Order instances by the given fields
        """
        orderBy: [OrderOrderByInput!]
    ): OrderConnection! @pgRelation(name: "orders_customer_id_fkey")
    paymentMethods(
        """
        Filter the related PaymentMethod instances
        """
        filter: PaymentMethodFilterInput
        """
        Select the first PaymentMethod instances
        """
        first: Int
        """
        Select the last PaymentMethod instances
        """
        last: Int
        """
        Select the PaymentMethod instances before the given cursor
        """
        before: String
        """
        Select the PaymentMethod instances after the given cursor
        """
        after: String
        """
        Order the PaymentMethod instances by the given fields
        """
        orderBy: [PaymentMethodOrderByInput!]
    ): PaymentMethodConnection!
        @pgRelation(name: "payment_methods_customer_id_fkey")
}

"""
The connection type for Customer
"""
type CustomerConnection @pgConnection(type: "Customer") {
    """
    A list of edges
    """
    edges: [CustomerEdge!]! @shareable
    """
    Information to aid in pagination
    """
    pageInfo: PageInfo! @shareable
}

"""
Return type when creating many customers
"""
type CustomerCreateManyPayload @pgMutation(type: "Customer") {
    """
    Returned item(s) from the mutation
    """
    returning: [CustomerReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when creating one Customer
"""
type CustomerCreatePayload @pgMutation(type: "Customer") {
    """
    Returned item(s) from the mutation
    """
    returning: CustomerReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting many customers
"""
type CustomerDeleteManyPayload @pgMutation(type: "Customer") {
    """
    Returned item(s) from the mutation
    """
    returning: [CustomerReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting one Customer
"""
type CustomerDeletePayload @pgMutation(type: "Customer") {
    """
    Returned item(s) from the mutation
    """
    returning: CustomerReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
An edge in a connection. Contains the node and its cursor
"""
type CustomerEdge {
    """
    The item at the end of the edge
    """
    node: Customer! @shareable
    """
    A cursor for use in pagination
    """
    cursor: String! @shareable
}

"""
Return type containing fields of the mutated or created Customer object
"""
type CustomerReturning @pgReturning(type: "Customer") {
    """
    The value of the customerId field
    """
    customerId: Int! @shareable
    """
    The value of the name field
    """
    name: String!
    """
    The value of the email field
    """
    email: String! @shareable
    """
    The value of the phone field
    """
    phone: String
    """
    The value of the address field
    """
    address: String
    """
    The value of the city field
    """
    city: String
    """
    The value of the postalCode field
    """
    postalCode: String
    """
    The value of the country field
    """
    country: String
    """
    The value of the createdAt field
    """
    createdAt: Timestamp!
}

"""
Return type when updating many customers
"""
type CustomerUpdateManyPayload @pgMutation(type: "Customer") {
    """
    Returned item(s) from the mutation
    """
    returning: [CustomerReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when updating one Customer
"""
type CustomerUpdatePayload @pgMutation(type: "Customer") {
    """
    Returned item(s) from the mutation
    """
    returning: CustomerReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Main order records tracking customer purchases
"""
type Order
    @key(fields: "orderId")
    @pgTable(name: "orders")
    @pgKey(fields: ["orderId"], type: PRIMARY) {
    """
    Unique identifier for the order
    """
    orderId: Int! @pgColumn(name: "order_id", type: INT)
    """
    Reference to the customer who placed this order
    """
    customerId: Int! @pgColumn(name: "customer_id", type: INT)
    orderDate: Timestamp! @pgColumn(name: "order_date", type: TIMESTAMP)
    """
    Current status of the order in the fulfillment process
    """
    status: String! @pgColumn(name: "status", type: VARCHAR)
    """
    Total order value including all items
    """
    totalAmount: Decimal! @pgColumn(name: "total_amount", type: NUMERIC)
    shippingAddress: String @pgColumn(name: "shipping_address", type: VARCHAR)
    paymentMethodId: Int @pgColumn(name: "payment_method_id", type: INT)
    customer: Customer!
        @pgRelation(
            name: "orders_customer_id_fkey"
            fields: ["customerId"]
            references: ["customerId"]
        )
    paymentMethod: PaymentMethod
        @pgRelation(
            name: "orders_payment_method_id_fkey"
            fields: ["paymentMethodId"]
            references: ["paymentMethodId"]
        )
    orderItems(
        """
        Filter the related OrderItem instances
        """
        filter: OrderItemFilterInput
        """
        Select the first OrderItem instances
        """
        first: Int
        """
        Select the last OrderItem instances
        """
        last: Int
        """
        Select the OrderItem instances before the given cursor
        """
        before: String
        """
        Select the OrderItem instances after the given cursor
        """
        after: String
        """
        Order the OrderItem instances by the given fields
        """
        orderBy: [OrderItemOrderByInput!]
    ): OrderItemConnection! @pgRelation(name: "order_items_order_id_fkey")
}

"""
The connection type for Order
"""
type OrderConnection @pgConnection(type: "Order") {
    """
    A list of edges
    """
    edges: [OrderEdge!]! @shareable
    """
    Information to aid in pagination
    """
    pageInfo: PageInfo! @shareable
}

"""
Return type when creating many orders
"""
type OrderCreateManyPayload @pgMutation(type: "Order") {
    """
    Returned item(s) from the mutation
    """
    returning: [OrderReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when creating one Order
"""
type OrderCreatePayload @pgMutation(type: "Order") {
    """
    Returned item(s) from the mutation
    """
    returning: OrderReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting many orders
"""
type OrderDeleteManyPayload @pgMutation(type: "Order") {
    """
    Returned item(s) from the mutation
    """
    returning: [OrderReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting one Order
"""
type OrderDeletePayload @pgMutation(type: "Order") {
    """
    Returned item(s) from the mutation
    """
    returning: OrderReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
An edge in a connection. Contains the node and its cursor
"""
type OrderEdge {
    """
    The item at the end of the edge
    """
    node: Order! @shareable
    """
    A cursor for use in pagination
    """
    cursor: String! @shareable
}

"""
Individual product line items within customer orders
"""
type OrderItem
    @key(fields: "orderItemId")
    @pgTable(name: "order_items")
    @pgKey(fields: ["orderItemId"], type: PRIMARY) {
    orderItemId: Int! @pgColumn(name: "order_item_id", type: INT)
    orderId: Int! @pgColumn(name: "order_id", type: INT)
    """
    Reference to the product in the external product service
    """
    productId: String! @pgColumn(name: "product_id", type: VARCHAR)
    """
    Number of units of the product ordered
    """
    quantity: Int! @pgColumn(name: "quantity", type: INT)
    unitPrice: Decimal! @pgColumn(name: "unit_price", type: NUMERIC)
    """
    Snapshot of product name at time of purchase
    """
    productName: String! @pgColumn(name: "product_name", type: VARCHAR)
    order: Order!
        @pgRelation(
            name: "order_items_order_id_fkey"
            fields: ["orderId"]
            references: ["orderId"]
        )
}

"""
The connection type for OrderItem
"""
type OrderItemConnection @pgConnection(type: "OrderItem") {
    """
    A list of edges
    """
    edges: [OrderItemEdge!]! @shareable
    """
    Information to aid in pagination
    """
    pageInfo: PageInfo! @shareable
}

"""
Return type when creating many orderItems
"""
type OrderItemCreateManyPayload @pgMutation(type: "OrderItem") {
    """
    Returned item(s) from the mutation
    """
    returning: [OrderItemReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when creating one OrderItem
"""
type OrderItemCreatePayload @pgMutation(type: "OrderItem") {
    """
    Returned item(s) from the mutation
    """
    returning: OrderItemReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting many orderItems
"""
type OrderItemDeleteManyPayload @pgMutation(type: "OrderItem") {
    """
    Returned item(s) from the mutation
    """
    returning: [OrderItemReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting one OrderItem
"""
type OrderItemDeletePayload @pgMutation(type: "OrderItem") {
    """
    Returned item(s) from the mutation
    """
    returning: OrderItemReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
An edge in a connection. Contains the node and its cursor
"""
type OrderItemEdge {
    """
    The item at the end of the edge
    """
    node: OrderItem! @shareable
    """
    A cursor for use in pagination
    """
    cursor: String! @shareable
}

"""
Return type containing fields of the mutated or created OrderItem object
"""
type OrderItemReturning @pgReturning(type: "OrderItem") {
    """
    The value of the orderItemId field
    """
    orderItemId: Int! @shareable
    """
    The value of the orderId field
    """
    orderId: Int!
    """
    The value of the productId field
    """
    productId: String!
    """
    The value of the quantity field
    """
    quantity: Int!
    """
    The value of the unitPrice field
    """
    unitPrice: Decimal!
    """
    The value of the productName field
    """
    productName: String!
}

"""
Return type when updating many orderItems
"""
type OrderItemUpdateManyPayload @pgMutation(type: "OrderItem") {
    """
    Returned item(s) from the mutation
    """
    returning: [OrderItemReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when updating one OrderItem
"""
type OrderItemUpdatePayload @pgMutation(type: "OrderItem") {
    """
    Returned item(s) from the mutation
    """
    returning: OrderItemReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type containing fields of the mutated or created Order object
"""
type OrderReturning @pgReturning(type: "Order") {
    """
    The value of the orderId field
    """
    orderId: Int! @shareable
    """
    The value of the customerId field
    """
    customerId: Int!
    """
    The value of the orderDate field
    """
    orderDate: Timestamp!
    """
    The value of the status field
    """
    status: String!
    """
    The value of the totalAmount field
    """
    totalAmount: Decimal!
    """
    The value of the shippingAddress field
    """
    shippingAddress: String
    """
    The value of the paymentMethodId field
    """
    paymentMethodId: Int
}

"""
Return type when updating many orders
"""
type OrderUpdateManyPayload @pgMutation(type: "Order") {
    """
    Returned item(s) from the mutation
    """
    returning: [OrderReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when updating one Order
"""
type OrderUpdatePayload @pgMutation(type: "Order") {
    """
    Returned item(s) from the mutation
    """
    returning: OrderReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Information about pagination in a collection of objects
"""
type PageInfo @shareable {
    """
    When paginating backwards, are there more items?
    """
    hasPreviousPage: Boolean! @shareable
    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean! @shareable
    """
    The cursor of the first item in the page
    """
    startCursor: String @shareable
    """
    The cursor of the last item in the page
    """
    endCursor: String @shareable
}

"""
Payment methods saved by customers
"""
type PaymentMethod
    @key(fields: "paymentMethodId")
    @pgTable(name: "payment_methods")
    @pgKey(fields: ["paymentMethodId"], type: PRIMARY) {
    paymentMethodId: Int! @pgColumn(name: "payment_method_id", type: INT)
    """
    Customer who owns this payment method
    """
    customerId: Int! @pgColumn(name: "customer_id", type: INT)
    """
    Type of payment method (credit card, PayPal, etc.)
    """
    paymentType: String! @pgColumn(name: "payment_type", type: VARCHAR)
    """
    Display label for the payment method (e.g. "Visa ending in 4242")
    """
    accountLabel: String @pgColumn(name: "account_label", type: VARCHAR)
    isDefault: Boolean @pgColumn(name: "is_default", type: BOOLEAN)
    customer: Customer!
        @pgRelation(
            name: "payment_methods_customer_id_fkey"
            fields: ["customerId"]
            references: ["customerId"]
        )
    orders(
        """
        Filter the related Order instances
        """
        filter: OrderFilterInput
        """
        Select the first Order instances
        """
        first: Int
        """
        Select the last Order instances
        """
        last: Int
        """
        Select the Order instances before the given cursor
        """
        before: String
        """
        Select the Order instances after the given cursor
        """
        after: String
        """
        Order the Order instances by the given fields
        """
        orderBy: [OrderOrderByInput!]
    ): OrderConnection! @pgRelation(name: "orders_payment_method_id_fkey")
}

"""
The connection type for PaymentMethod
"""
type PaymentMethodConnection @pgConnection(type: "PaymentMethod") {
    """
    A list of edges
    """
    edges: [PaymentMethodEdge!]! @shareable
    """
    Information to aid in pagination
    """
    pageInfo: PageInfo! @shareable
}

"""
Return type when creating many paymentMethods
"""
type PaymentMethodCreateManyPayload @pgMutation(type: "PaymentMethod") {
    """
    Returned item(s) from the mutation
    """
    returning: [PaymentMethodReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when creating one PaymentMethod
"""
type PaymentMethodCreatePayload @pgMutation(type: "PaymentMethod") {
    """
    Returned item(s) from the mutation
    """
    returning: PaymentMethodReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting many paymentMethods
"""
type PaymentMethodDeleteManyPayload @pgMutation(type: "PaymentMethod") {
    """
    Returned item(s) from the mutation
    """
    returning: [PaymentMethodReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when deleting one PaymentMethod
"""
type PaymentMethodDeletePayload @pgMutation(type: "PaymentMethod") {
    """
    Returned item(s) from the mutation
    """
    returning: PaymentMethodReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
An edge in a connection. Contains the node and its cursor
"""
type PaymentMethodEdge {
    """
    The item at the end of the edge
    """
    node: PaymentMethod! @shareable
    """
    A cursor for use in pagination
    """
    cursor: String! @shareable
}

"""
Return type containing fields of the mutated or created PaymentMethod object
"""
type PaymentMethodReturning @pgReturning(type: "PaymentMethod") {
    """
    The value of the paymentMethodId field
    """
    paymentMethodId: Int! @shareable
    """
    The value of the customerId field
    """
    customerId: Int!
    """
    The value of the paymentType field
    """
    paymentType: String!
    """
    The value of the accountLabel field
    """
    accountLabel: String
    """
    The value of the isDefault field
    """
    isDefault: Boolean
}

"""
Return type when updating many paymentMethods
"""
type PaymentMethodUpdateManyPayload @pgMutation(type: "PaymentMethod") {
    """
    Returned item(s) from the mutation
    """
    returning: [PaymentMethodReturning]! @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

"""
Return type when updating one PaymentMethod
"""
type PaymentMethodUpdatePayload @pgMutation(type: "PaymentMethod") {
    """
    Returned item(s) from the mutation
    """
    returning: PaymentMethodReturning @shareable
    """
    The number of rows mutated
    """
    rowCount: Int! @shareable
}

type Query {
    """
    Query a unique Customer
    """
    customer(
        """
        Input for unique Customer lookup
        """
        lookup: CustomerLookupInput!
    ): Customer @pgSelectOne
    """
    Query and paginate multiple customers
    """
    customers(
        """
        Filter for Customer
        """
        filter: CustomerFilterInput
        """
        Limit the number of results, from the beginning
        """
        first: Int
        """
        Limit the number of results, from the end
        """
        last: Int
        """
        Cursor for pagination, select items before the cursor. Use together with `last`.
        """
        before: String
        """
        Cursor for pagination, select items after the cursor. Use together with `first`.
        """
        after: String
        """
        Order the results by selected fields
        """
        orderBy: [CustomerOrderByInput!]
    ): CustomerConnection! @pgSelectMany
    """
    Lookup multiple customers for subgraph joins
    """
    customerLookup(
        """
        Filter customers with an array of keys
        """
        lookup: CustomerManyLookupInput @inaccessible
    ): [Customer] @pgLookup @lookup @inaccessible
    """
    Query a unique OrderItem
    """
    orderItem(
        """
        Input for unique OrderItem lookup
        """
        lookup: OrderItemLookupInput!
    ): OrderItem @pgSelectOne
    """
    Query and paginate multiple orderItems
    """
    orderItems(
        """
        Filter for OrderItem
        """
        filter: OrderItemFilterInput
        """
        Limit the number of results, from the beginning
        """
        first: Int
        """
        Limit the number of results, from the end
        """
        last: Int
        """
        Cursor for pagination, select items before the cursor. Use together with `last`.
        """
        before: String
        """
        Cursor for pagination, select items after the cursor. Use together with `first`.
        """
        after: String
        """
        Order the results by selected fields
        """
        orderBy: [OrderItemOrderByInput!]
    ): OrderItemConnection! @pgSelectMany
    """
    Lookup multiple orderItems for subgraph joins
    """
    orderItemLookup(
        """
        Filter orderItems with an array of keys
        """
        lookup: OrderItemManyLookupInput @inaccessible
    ): [OrderItem] @pgLookup @lookup @inaccessible
    """
    Query a unique Order
    """
    order(
        """
        Input for unique Order lookup
        """
        lookup: OrderLookupInput!
    ): Order @pgSelectOne
    """
    Query and paginate multiple orders
    """
    orders(
        """
        Filter for Order
        """
        filter: OrderFilterInput
        """
        Limit the number of results, from the beginning
        """
        first: Int
        """
        Limit the number of results, from the end
        """
        last: Int
        """
        Cursor for pagination, select items before the cursor. Use together with `last`.
        """
        before: String
        """
        Cursor for pagination, select items after the cursor. Use together with `first`.
        """
        after: String
        """
        Order the results by selected fields
        """
        orderBy: [OrderOrderByInput!]
    ): OrderConnection! @pgSelectMany
    """
    Lookup multiple orders for subgraph joins
    """
    orderLookup(
        """
        Filter orders with an array of keys
        """
        lookup: OrderManyLookupInput @inaccessible
    ): [Order] @pgLookup @lookup @inaccessible
    """
    Query a unique PaymentMethod
    """
    paymentMethod(
        """
        Input for unique PaymentMethod lookup
        """
        lookup: PaymentMethodLookupInput!
    ): PaymentMethod @pgSelectOne
    """
    Query and paginate multiple paymentMethods
    """
    paymentMethods(
        """
        Filter for PaymentMethod
        """
        filter: PaymentMethodFilterInput
        """
        Limit the number of results, from the beginning
        """
        first: Int
        """
        Limit the number of results, from the end
        """
        last: Int
        """
        Cursor for pagination, select items before the cursor. Use together with `last`.
        """
        before: String
        """
        Cursor for pagination, select items after the cursor. Use together with `first`.
        """
        after: String
        """
        Order the results by selected fields
        """
        orderBy: [PaymentMethodOrderByInput!]
    ): PaymentMethodConnection! @pgSelectMany
    """
    Lookup multiple paymentMethods for subgraph joins
    """
    paymentMethodLookup(
        """
        Filter paymentMethods with an array of keys
        """
        lookup: PaymentMethodManyLookupInput @inaccessible
    ): [PaymentMethod] @pgLookup @lookup @inaccessible
}

type Mutation {
    """
    Create a single Customer
    """
    customerCreate(
        """
        Input for creating a single Customer
        """
        input: CustomerCreateInput!
    ): CustomerCreatePayload! @pgInsertOne
    """
    Create multiple customers
    """
    customerCreateMany(
        """
        Input for creating multiple Customer instances
        """
        input: [CustomerCreateInput!]!
    ): CustomerCreateManyPayload! @pgInsertMany
    """
    Update a unique Customer
    """
    customerUpdate(
        """
        Lookup input for unique Customer update
        """
        lookup: CustomerLookupInput!
        """
        Input for updating a Customer
        """
        input: CustomerUpdateInput!
    ): CustomerUpdatePayload! @pgUpdateOne
    """
    Update multiple customers
    """
    customerUpdateMany(
        """
        Filter for updating multiple Customer instances
        """
        filter: CustomerFilterInput
        """
        Input for updating multiple Customer instances
        """
        input: CustomerUpdateInput!
    ): CustomerUpdateManyPayload! @pgUpdateMany
    """
    Delete a unique Customer
    """
    customerDelete(
        """
        Lookup input for unique Customer deletion
        """
        lookup: CustomerLookupInput!
    ): CustomerDeletePayload! @pgDeleteOne
    """
    Delete multiple customers
    """
    customerDeleteMany(
        """
        Filter for Customer deletion
        """
        filter: CustomerFilterInput
    ): CustomerDeleteManyPayload! @pgDeleteMany
    """
    Create a single OrderItem
    """
    orderItemCreate(
        """
        Input for creating a single OrderItem
        """
        input: OrderItemCreateInput!
    ): OrderItemCreatePayload! @pgInsertOne
    """
    Create multiple orderItems
    """
    orderItemCreateMany(
        """
        Input for creating multiple OrderItem instances
        """
        input: [OrderItemCreateInput!]!
    ): OrderItemCreateManyPayload! @pgInsertMany
    """
    Update a unique OrderItem
    """
    orderItemUpdate(
        """
        Lookup input for unique OrderItem update
        """
        lookup: OrderItemLookupInput!
        """
        Input for updating a OrderItem
        """
        input: OrderItemUpdateInput!
    ): OrderItemUpdatePayload! @pgUpdateOne
    """
    Update multiple orderItems
    """
    orderItemUpdateMany(
        """
        Filter for updating multiple OrderItem instances
        """
        filter: OrderItemFilterInput
        """
        Input for updating multiple OrderItem instances
        """
        input: OrderItemUpdateInput!
    ): OrderItemUpdateManyPayload! @pgUpdateMany
    """
    Delete a unique OrderItem
    """
    orderItemDelete(
        """
        Lookup input for unique OrderItem deletion
        """
        lookup: OrderItemLookupInput!
    ): OrderItemDeletePayload! @pgDeleteOne
    """
    Delete multiple orderItems
    """
    orderItemDeleteMany(
        """
        Filter for OrderItem deletion
        """
        filter: OrderItemFilterInput
    ): OrderItemDeleteManyPayload! @pgDeleteMany
    """
    Create a single Order
    """
    orderCreate(
        """
        Input for creating a single Order
        """
        input: OrderCreateInput!
    ): OrderCreatePayload! @pgInsertOne
    """
    Create multiple orders
    """
    orderCreateMany(
        """
        Input for creating multiple Order instances
        """
        input: [OrderCreateInput!]!
    ): OrderCreateManyPayload! @pgInsertMany
    """
    Update a unique Order
    """
    orderUpdate(
        """
        Lookup input for unique Order update
        """
        lookup: OrderLookupInput!
        """
        Input for updating a Order
        """
        input: OrderUpdateInput!
    ): OrderUpdatePayload! @pgUpdateOne
    """
    Update multiple orders
    """
    orderUpdateMany(
        """
        Filter for updating multiple Order instances
        """
        filter: OrderFilterInput
        """
        Input for updating multiple Order instances
        """
        input: OrderUpdateInput!
    ): OrderUpdateManyPayload! @pgUpdateMany
    """
    Delete a unique Order
    """
    orderDelete(
        """
        Lookup input for unique Order deletion
        """
        lookup: OrderLookupInput!
    ): OrderDeletePayload! @pgDeleteOne
    """
    Delete multiple orders
    """
    orderDeleteMany(
        """
        Filter for Order deletion
        """
        filter: OrderFilterInput
    ): OrderDeleteManyPayload! @pgDeleteMany
    """
    Create a single PaymentMethod
    """
    paymentMethodCreate(
        """
        Input for creating a single PaymentMethod
        """
        input: PaymentMethodCreateInput!
    ): PaymentMethodCreatePayload! @pgInsertOne
    """
    Create multiple paymentMethods
    """
    paymentMethodCreateMany(
        """
        Input for creating multiple PaymentMethod instances
        """
        input: [PaymentMethodCreateInput!]!
    ): PaymentMethodCreateManyPayload! @pgInsertMany
    """
    Update a unique PaymentMethod
    """
    paymentMethodUpdate(
        """
        Lookup input for unique PaymentMethod update
        """
        lookup: PaymentMethodLookupInput!
        """
        Input for updating a PaymentMethod
        """
        input: PaymentMethodUpdateInput!
    ): PaymentMethodUpdatePayload! @pgUpdateOne
    """
    Update multiple paymentMethods
    """
    paymentMethodUpdateMany(
        """
        Filter for updating multiple PaymentMethod instances
        """
        filter: PaymentMethodFilterInput
        """
        Input for updating multiple PaymentMethod instances
        """
        input: PaymentMethodUpdateInput!
    ): PaymentMethodUpdateManyPayload! @pgUpdateMany
    """
    Delete a unique PaymentMethod
    """
    paymentMethodDelete(
        """
        Lookup input for unique PaymentMethod deletion
        """
        lookup: PaymentMethodLookupInput!
    ): PaymentMethodDeletePayload! @pgDeleteOne
    """
    Delete multiple paymentMethods
    """
    paymentMethodDeleteMany(
        """
        Filter for PaymentMethod deletion
        """
        filter: PaymentMethodFilterInput
    ): PaymentMethodDeleteManyPayload! @pgDeleteMany
}
